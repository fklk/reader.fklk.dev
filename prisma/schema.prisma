generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                  @id
  email              String                  @unique
  handle             String                  @unique
  role               UserRole                @default(USER)
  hashedPassword     String
  sessions           Session[]
  comments           Comment[]
  readingProgress    ReadingProgress[]
  authorOf           Novel[]
  list               UserList[]
  customInsights     CustomNovelInsight[]
  novelInsightStates UserNovelInsightState[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Novel {
  id                String                  @id @default(uuid())
  name              String
  description       String
  status            NovelStatus             @default(ANNOUNCED)
  imgPath           String
  genre             Genre                   @relation(fields: [genreId], references: [id], onDelete: Restrict)
  genreId           Int
  chapters          Chapter[]
  comments          Comment[]
  readingProgress   ReadingProgress[]
  novelInsights     NovelInsight[]
  author            User                    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId          String
  userLists         UserList[]
  views             Int                     @default(0)
  customInsights    CustomNovelInsight[]
  userInsightStates UserNovelInsightState[]
  isOnShowcase      Boolean                 @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NovelStatus {
  ANNOUNCED
  ONGOING
  PAUSED
  FINISHED
  DISCONTINUED
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  novels Novel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id              String            @id @default(uuid())
  descriptor      Int
  name            String
  content         String
  novel           Novel             @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId         String
  comments        Comment[]
  readingProgress ReadingProgress[]
  novelInsight    NovelInsight[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, descriptor])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReadingProgress {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  novel     Novel   @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, novelId, chapterId])
}

model NovelInsight {
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String
  trigger   String
  content   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([novelId, trigger, chapterId])
}

model CustomNovelInsight {
  novel   Novel  @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  trigger String
  content String

  @@id([novelId, userId, trigger])
}

model UserList {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  novel   Novel  @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId String

  @@id([userId, novelId])
}

model UserNovelInsightState {
  user     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  novel    Novel                @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId  String
  category InsightStateCategory
  isActive Boolean

  @@id([userId, novelId, category])
}

enum InsightStateCategory {
  DEFAULT
  CUSTOM
}
